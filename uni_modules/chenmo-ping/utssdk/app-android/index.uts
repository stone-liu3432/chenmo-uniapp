import { Ping, PingOptions, PingResult, PingSync } from "../interface";
import { PingFailImpl, getErrcode, UniErrorSubject } from '../unierror';
import { UTSAndroid } from "io.dcloud.uts";
import InetAddress from "java.net.InetAddress";
import ProcessBuilder from "java.lang.ProcessBuilder";
import BufferedReader from "java.io.BufferedReader";
import InputStreamReader from "java.io.InputStreamReader";
/**
 * @description 判断是否是ip或者主机
 * @param {Object} str 
 */
function isIpOrHostname(str : string) : boolean {
	const ipv4Pattern = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(?!$)|$)){4}$/;
	const ipv6Pattern = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}(([0-9]{1,3}\.){3,3}[0-9]{1,3})|([0-9a-fA-F]{1,4}:){1,4}:(([0-9]{1,3}\.){3,3}[0-9]{1,3}))$/;
	const hostnamePattern = /^(?=.{1,253}$)((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.?)+[A-Za-z]{2,6}$/;
	return ipv4Pattern.test(str) || ipv6Pattern.test(str) || hostnamePattern.test(str);
}

type parsePingType = {
	time : number,
	packetLoss : number
}
// 解析 ping 命令的输出
function parsePingOutput(output : string) : parsePingType {
	const lines = output.split("\n");
	let time = 0;
	let packetLoss = 100;
	let timeCount = 0
	lines.forEach(line => {
		if (line.includes("time=")) {
			timeCount++
			const timeMatch = line.match(/time=(\d+(?:\.\d+)?)/);
			if (timeMatch !== null && timeMatch[1] !== null) {
				time += parseFloat(timeMatch[1] as string);
			}
		}
		if (line.includes("packet loss")) {
			const packetLossMatch = line.match(/(\d+)% packet loss/);
			if (packetLossMatch !== null && packetLossMatch[1] !== null) {
				packetLoss = parseFloat(packetLossMatch[1] as string);
			}
		}
	});
	const averageTime = timeCount > 0 ? Math.round(time / timeCount) : 0;
	return {
		time: averageTime,
		packetLoss: packetLoss
	} as parsePingType;
}
/**
 * 异步ping
 */
export const ping : Ping = function (options : PingOptions) {
	try {
		const context = UTSAndroid.getAppContext();
		if (context != null) {
			const addr = options.addr
			if (!isIpOrHostname(addr)) {
				let err = new PingFailImpl(getErrcode(13000));
				options.fail?.(err)
				options.complete?.(err)
				return
			}
			const count = options.count ?? 5
			const packetSize = options.packetSize ?? 32
			const timeout = options.time ?? 5
			const pingCmd = ["ping", "-c", count.toString(), "-s", packetSize.toString(), "-W", timeout.toString(), addr];
			const processBuilder = new ProcessBuilder(pingCmd);
			const process = processBuilder.start();
			const reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
			const output = new java.lang.StringBuilder();
			while (true) {
				const line : string | null = reader.readLine()
				if (line === null) break
				output.append(line + "\n");
			}
			const exitValue = process.waitFor();
			if (exitValue == 0) {
				const result = parsePingOutput(output.toString());
				let res = new PingResult(0, UniErrorSubject, "ping:ok", 0)
				res.time = result.time
				res.packetLoss = result.packetLoss
				options.success?.(res)
				options.complete?.(res)
			} else {
				let err = new PingFailImpl(getErrcode(13002));
				options.fail?.(err)
				options.complete?.(err)
			}
		} else {
			let err = new PingFailImpl(getErrcode(1001));
			options.fail?.(err)
			options.complete?.(err)
		}
	} catch (e) {
		console.log(e);
		let err = new PingFailImpl(getErrcode(13010));
		options.fail?.(err)
		options.complete?.(err)
	}
}
/**
 * 同步ping
 */
export const pingSync : PingSync = function (options : PingOptions) : PingResult {
	try {
		const context = UTSAndroid.getAppContext();
		if (context != null) {
			const addr = options.addr
			if (!isIpOrHostname(addr)) {
				const err = new PingFailImpl(getErrcode(13000));
				const res = new PingResult(err.errCode, err.errSubject, err.errMsg)
				return res
			}
			const count = options.count ?? 5
			const packetSize = options.packetSize ?? 32
			const timeout = options.time ?? 5
			const pingCmd = ["ping", "-c", count.toString(), "-s", packetSize.toString(), "-W", timeout.toString(), addr];
			const processBuilder = new ProcessBuilder(pingCmd);
			const process = processBuilder.start();
			const reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
			const output = new java.lang.StringBuilder();
			while (true) {
				const line : string | null = reader.readLine()
				if (line === null) break
				output.append(line + "\n");
			}
			const exitValue = process.waitFor();
			if (exitValue == 0) {
				const result = parsePingOutput(output.toString());
				let res = new PingResult(0, UniErrorSubject, "ping:ok", 0)
				res.time = result.time
				res.packetLoss = result.packetLoss
				return res
			} else {
				let err = new PingFailImpl(getErrcode(13002));
				const res = new PingResult(err.errCode, err.errSubject, err.errMsg)
				return res
			}
		} else {
			const err = new PingFailImpl(getErrcode(1001));
			const res = new PingResult(err.errCode, err.errSubject, err.errMsg)
			return res
		}
	} catch (e : Error) {
		console.error(e)
		const err = new PingFailImpl(getErrcode(13010));
		const res = new PingResult(err.errCode, err.errSubject, err.errMsg)
		return res
	}
}